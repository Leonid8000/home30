    public function loadUsers(ObjectManager $manager){
        for($i =1; $i<3; $i++){
            $user = new User();
            $user->setFirstName($this->faker->text());
            $user->setEmail($this->faker->text(180));
            $user->setRoles(['ROLE_ADMIN']);
            $user->setPassword($this->passwordEncoder->encodePassword(
                $user,
                'password'
            ));
            $manager->persist($user);
        }
        $manager->flush();
    }

1 Перекинуть question в admin

2 Поменять фикстуры
 php bin/console doctrine:fixtures:load

    public function loadUsers(ObjectManager $manager){

            $user = new User();
            $user->setFirstName($this->faker->text());
            $user->setEmail('leonidzp8000@ukr.net');
            $user->setRoles(['ROLE_ADMIN']);
            $user->setPassword($this->passwordEncoder->encodePassword(
                $user,
                'password'
            ));
            $manager->persist($user);

        $manager->flush();
    }

3 Опросник

4  {% if is_granted('ROLE_USER') %}
            <button class="m-2 btn-dark"><a href="{{ path('app_logout') }}" class="text-light">LOG OUT</a></button>
            <a href="{{ path('exam') }}" class="plays-ffont m-2 text-dark">Start questionnaire</a>
        {% else %}

css
---------------
a{
    font-family: 'Anton', sans-serif;
}

h1{
    font-family: 'Anton', sans-serif;
}

a:hover{
    text-underline: none;
}

body{
    background: #b2bec3;
}

.plays-font{
    font-family: 'Playfair Display', serif;
}
.anton-font{
    font-family: 'Anton', sans-serif;
}
.lobster-font{
    font-family: 'Lobster', cursive;
}

#footer{
    position:fixed;
    bottom:0;
    height:100px;
    width:100%;
}

/* index */
.admin-route{
    color: #1e272e;
}

.admin-route:hover{

    transition: 0.7s;
    color:#485460;
}

main/index
------------------------------------
    <div class="header bg-dark ">
        {% if is_granted('ROLE_USER') %}
            <div class="d-flex justify-content-end">
                <a href="{{ path('app_logout') }}" class="btn btn-dark m-3">Log Out</a>
            </div>
        {% else %}
            <div class="d-flex justify-content-end">
                <a href="{{ path('app_login') }}" class="btn btn-dark m-2">Login</a>
                <a href="{{ path('register') }}" class="btn btn-dark m-2">Sign Up</a>
            </div>
        {% endif %}
    </div>

    <h3 class="text-dark mt-4 anton-font text-center">Questions Task</h3>

    {% if is_granted('ROLE_ADMIN') %}
        <a href="{{ path('admin') }}" class="lobster-font m-2 admin-route">Admin Panel</a><br />
    {% endif %}

    {% if is_granted('ROLE_USER') %}
        <a href="{{ path('exam') }}" class="plays-font m-2 text-dark font-weight-bold">Start questionnaire</a>
    {% endif %}

exam
----------------------------------
<div class="header bg-dark ">
        {% if is_granted('ROLE_USER') %}
            <div class="d-flex justify-content-end">
                <a href="{{ path('app_logout') }}" class="btn btn-dark m-3">Log Out</a>
            </div>
        {% endif %}
    </div>
    <div class="example-wrapper">
        {% if is_granted('ROLE_USER') %}
            <button><a href="{{ path('index') }}">Home</a></button>
        {% endif %}
        {% if is_granted('ROLE_ADMIN') %}
            <a href="{{ path('admin') }}" class="lobster-font m-2 admin-route">Admin Panel</a><br />
        {% endif %}
    </div>

    {% for question in questions %}
        <p>{{ question.id }}) {{ question.title }}</p>
    {% endfor %}



МАРШРУТЫ login и register доступны только для anonymus
==========================================================================================================================================================================================================
Отображение при create Questions answers
Create ManyToMany relationships
Нужно добавить 2 поля в каждую сущность и добавить анотации подключить пакеты коллекций и связать сущности главную inversedBy с вторичной 

Qustion antity
<?php
namespace App\Entity;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
/**
 * @ORM\Entity(repositoryClass="App\Repository\QuestionRepository")
 */
class Question
{
    /**
     * @ORM\Id()
     * @ORM\GeneratedValue()
     * @ORM\Column(type="integer")
     */
    private $id;
    /**
     * @ORM\Column(type="text", length=100)
     */
    private $title;
    /**
     * @ORM\ManyToMany(targetEntity="App\Entity\Answer", inversedBy="questions")
     */
    private $answers;

    public function __construct()
    {
        $this->answers = new ArrayCollection();
    }

    /**
     * @return Collection|Question[]
     */
    public function getAnswers(): Collection
    {
        return $this->answers;
    }

    public function addAnswer(Answer $answer): self
    {
        if (!$this->answers->contains($answer)) {
            $this->answers[] = $answer;
        }
        return $this;
    }
    public function removeTag(Answer $answer): self
    {
        if ($this->answers->contains($answer)) {
            $this->answers->removeElement($answer);
        }
        return $this;
    }

    //Getters & Setters questions
    public function getId(){
        return $this->id;
    }
    public function getTitle(){
        return $this->title;
    }
    public function setTitle($title){
        $this->title = $title;
    }

}

Answer
namespace App\Entity;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
/**
 * @ORM\Entity(repositoryClass="App\Repository\AnswerRepository")
 */
class Answer
{
    /**
     * @ORM\Id()
     * @ORM\GeneratedValue()
     * @ORM\Column(type="integer")
     */
    private $id;
    /**
     * @ORM\Column(type="text", length=100)
     */
    private $answer;
    /**
     * @ORM\ManyToMany(targetEntity="App\Entity\Question", mappedBy="answers")
     */
    private $questions;
    
    public function __construct()
    {
        $this->questions = new ArrayCollection();
    }

    /**
     * @return Collection|Question[]
     */
    public function getQuestion(): Collection
    {
        return $this->questions;
    }

    public function addQuestion(Question $question): self
    {
        if (!$this->questions->contains($question)) {
            $this->questions[] = $question;
            $question->addAnswer($this);
        }
        return $this;
    }
    public function removeQuestion(Question $question): self
    {
        if ($this->questions->contains($question)) {
            $this->questions->removeElement($question);
        }
        return $this;
    }
    
    //Getters & Setters answer
    public function getId(){
        return $this->id;
    }
    public function getAnswer(){
        return $this->answer;
    }
    public function setAnswer($answer){
        $this->answer = $answer;
    }
}

bin/console make:migration

php bin/console doctrine:migrations:migrate

!!! 3 таблица создасться автоматически questions_answers

Далее нужно заполнить ее q1 a1 a2  q2 a1 a2 и  т д

Нужно зделать крутую фикстуру но я заполнил по варварски

И вывести в твиге (question/index) 

             {% for question in questions %}
                        <tr>
                            <td>{{ question.title }}</td>
                            <td>
                                {% for answer in question.answers %}
                                    <span class="badge badge-secondary">{{ answer.answer }}</span>
                                {% endfor %}
                            </td>
                            <td><a href="/admin/edit/{{ question.id }}" class="btn btn-secondary">Edit</a></td>
                            <td><a href="" class="btn btn-danger question-delete" data-id="{{ question.id }}">Delete</a></td>
                        </tr>

                    {% endfor %}

Вывести ответы к данному вопросу в exam
 	    {% for answer in question.answers %}
                <input type="checkbox" class="checkbox-round" value="{{ answer.answer }}">
            {% endfor %}

use Symfony\Component\Validator\Constraints as Assert;
Для валидации нужно использовать анотацию regex @Assert/Regex
@Assert\Length(min=5, max=255)

Создал форму QuestionFormType

Update QuestionController AnswerController Question Answer twig: q create q index

